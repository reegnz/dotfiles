snippet k8s_resource "Kubernetes Resource" b
---
apiVersion: ${1:apiVersion}
kind: ${2:kind}
metadata:
  name: ${3:name}
$0
endsnippet

snippet k8s_configmap "Kubernetes ConfigMap" b
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${1:name}
data:
  $0
endsnippet

snippet k8s_secret "Kubernetes Secret" b
---
apiVersion: v1
kind: Secret
metadata:
  name: ${1:name}
stringData:
  $0
endsnippet

snippet k8s_service "Kubernetes Service" b
---
apiVersion: v1
kind: Service
metadata:
  name: ${1:name}
spec:
  selector:
    app: ${2:appname}
  ports:
    - port: ${3:port}
$0
endsnippet

snippet k8s_ingress "Kubernetes Ingress" b
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${1:name}
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: ${2:host}
        http:
          paths:
            - path: ${3:/}
                pathType: Prefix
                backend:
                  service:
                    name: ${4:service}
                    port:
                      number: ${5:80}
$0
endsnippet

snippet k8s_deploy "Kubernetes Deployment" b
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${1:name}
  labels:
    app: ${2:$1}
spec:
  selector:
    matchLabels:
      app: $2
  template:
    metadata:
      labels:
        app: $2
    spec:
      containers:
        - name: $1
          image: ${3:image}
$0
endsnippet

snippet k8s_statefulset "Kubernetes ReplicaSet" b
---
apiVersion: v1
kind: Service
metadata:
  name: ${1:name}
  labels:
    app: ${2:$1}
spec:
  ports:
    - port: ${3:port}
      name: web
  clusterIP: "none"
  selector:
    app: $2
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: ${1:name}
  labels:
    app: ${2:$1}
spec:
  selector:
    matchLabels:
      app: $2
  serviceName: $1
  template:
    metadata:
      labels:
        app: $2
    spec:
      containers:
        - name: $1
          image: ${3:image}
          ports:
            - containerPort: $2
              name: web
            volumeMounts:
            - name: data
              mountPath: ${4:/usr/local/var/$1}
      volumeClaimTemplates:
        - metadata:
            name: data
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 1Gi
$0
endsnippet

snippet k8s_job "Kubernetes Job" b
---
apiVersion: batch/v1
kind: Job
metadata:
  name: ${1:name}
  labels:
    app: ${2:$1}
spec:
  template:
    spec:
      containers:
        - name: ${3:$1}
          image: ${4:alpine:latest}
    restartPolicy: Never
$0
endsnippet

snippet k8s_serviceaccount "Kubernetes ServiceAccount" b
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${1:name}
endsnippet

snippet k8s_clusterrole "Kubernetes ClusterRole" b
---
apiVersion: rbac.authorization.k8s.io
kind: ClusterRole
metadata:
  name: ${1:name}
rules:
  - apiGroups:
      - ${2:""}
    resources:
      - ${3:configmap}
    verbs:
      - ${3:get}
endsnippet

snippet k8s_clusterrolebinding "Kubernetes ClusterRole Binding" b
---
apiVersion: v1
kind: ClusterRoleBinding
metadata:
  name: ${1:name}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ${2:cluster_role_name}
subjects:
  - kind: ${3:ServiceAccount}
    name: ${4:subject_name}
    namespace: "${5:default}"
endsnippet
