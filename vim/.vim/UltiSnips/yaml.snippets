snippet "kind: Any" "Kubernetes Resource" b
---
apiVersion: ${1:apiVersion}
kind: ${2:kind}
metadata:
  name: ${3:name}
$0
endsnippet

snippet "kind: Namespace" "Kubernetes namespace" b
---
apiVersion: v1
kind: Namespace
metadata:
  name: ${1:name}
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: compute-resources
  namespace: $1
spec:
  hard:
    requests.cpu: 4000m
    requests.memory: 4Gi
    limits.cpu: 4000m
    limits.memory: 4Gi
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: storage-resources
  namespace: $1
spec:
  hard:
    requests.storage: 10Gi
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: object-counts
  namespace: $1
spec:
  hard:
    configmaps: "50"
    secrets: "50"
    services: "50"
    pods: "50"
---
apiVersion: v1
kind: LimitRange
metadata:
  name: cpu-and-memory
  namespace: $1
spec:
  limits:
  - type: Container
    min:
      cpu: 25m
      memory: 32Mi
    max:
      cpu: 500m
      memory: 512Mi
    defaultRequest:
      cpu: 500m
      memory: 256Mi
    default:
      cpu: 500m
      memory: 512Mi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: $1
automountServiceAccountToken: false
endsnippet

snippet "kind: ConfigMap" "Kubernetes ConfigMap" b
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${1:name}
data:
  $0
endsnippet

snippet "kind: Secret" "Kubernetes Secret" b
---
apiVersion: v1
kind: Secret
metadata:
  name: ${1:name}
stringData:
  $0
endsnippet

snippet "kind: Service" "Kubernetes Service" b
---
apiVersion: v1
kind: Service
metadata:
  name: ${1:name}
spec:
  selector:
    app: ${2:$1}
  ports:
  - port: ${3:80}
    targetPort: ${4:$3}$0
endsnippet

snippet "kind: Ingress" "Kubernetes Ingress" b
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${1:something}
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: ${4:${2:$1}.${3:example.com}}
    http:
      paths:
      - path: ${5:/}
        pathType: Prefix
        backend:
          service:
            name: ${6:service}
            port:
              number: ${7:80}$0
endsnippet

snippet "kind: Deployment" "Kubernetes Deployment" b
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${1:name}
  labels:
    app: ${2:$1}
spec:
  selector:
    matchLabels:
      app: ${3:$2}
  template:
    metadata:
      labels:
        app: ${4:$2}
    spec:
      containers:
      - name: ${5:$1}
        image: ${6:image}$0
endsnippet

snippet "kind: StatefulSet" "Kubernetes ReplicaSet" b
---
apiVersion: v1
kind: Service
metadata:
  name: ${1:name}
  labels:
    app: ${2:$1}
spec:
  ports:
  - port: ${3:port}
    name: web
  clusterIP: "none"
  selector:
    app: $2
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${1:name}
  labels:
    app: ${2:$1}
spec:
  selector:
    matchLabels:
      app: $2
  serviceName: $1
  template:
    metadata:
      labels:
        app: $2
    spec:
      containers:
      - name: $1
        image: ${3:image}
        ports:
        - containerPort: $2
          name: web
        volumeMounts:
        - name: data
          mountPath: ${4:/usr/local/var/$1}
      volumeClaimTemplates:
      - metadata:
          name: data
        spec:
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 1Gi$0
endsnippet

snippet "kind: Job" "Kubernetes Job" b
---
apiVersion: batch/v1
kind: Job
metadata:
  name: ${1:name}
  labels:
    app: ${2:$1}
spec:
  template:
    spec:
      containers:
      - name: ${3:$1}
        image: ${4:alpine:latest}
    restartPolicy: Never$0
endsnippet

snippet "kind: CronJob" "Kubernetes CronJob" b
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ${1:name}
  labels:
    app: ${2:$1}
spec:
  schedule: "* * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: ${3:$1}
            image: ${4:alpine:latest}
          restartPolicy: Never$0
endsnippet

snippet "kind: ServiceAccount" "Kubernetes ServiceAccount" b
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${1:name}$0
endsnippet

snippet "kind: Role" "Kubernetes RBAC Role" b
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ${1:name}
rules:
- apiGroups:
  - ${2:""}
  resources:
  - ${3:configmap}
  verbs:
  - ${3:get}$0
endsnippet

snippet "kind: ClusterRole" "Kubernetes RBAC ClusterRole" b
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ${1:name}
rules:
- apiGroups:
  - ${2:""}
  resources:
  - ${3:configmap}
  verbs:
  - ${3:get}$0
endsnippet

snippet "kind: RoleBinding" "Kubernetes RBAC RoleBinding" b
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ${1:name}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ${2:myrole}
subjects:
- kind: ${3:ServiceAccount}
  name: ${4:mysvcacct}$0
endsnippet

snippet "kind: ClusterRoleBinding" "Kubernetes RBAC ClusterRoleBinding" b
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ${1:name}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ${2:cluster_role_name}
subjects:
- kind: ${3:ServiceAccount}
  name: ${4:subject_name}
  namespace: "${5:default}"$0
endsnippet

snippet "kind: Cluster" "kind cluster definition" b
---
apiVersion: "kind.x-k8s.io/v1alpha4"
kind: Cluster
name: ${1:kind}$0
endsnippet

snippet "kind: Kustomization" "kustomize kustomization" b
---
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
- $0
endsnippet

snippet "kind: ResourceQuota" "Resource Quota of a namespace" b
apiVersion: v1
kind: ResourceQuota
metadata:
  name: ${1:name}
  namespace: ${2:namespace}
spec:
  hard:
    requests.cpu: 4000m
    requests.memory: 4Gi
    limits.cpu: 4000m
    limits.memory: 4Gi$0
endsnippet

snippet "k8s: VolumeToken" "Kubernetes Projected Token Volume"
- name: $1
  projected:
    sources:
    - serviceAccountToken:
        audience: $2
        expirationSeconds: ${3:3600}
        path: token
endsnippet

snippet "k8s: VolumeMount" "Kubernetes Token Mount"
- name: $1
  mountPath: ${2:path}
  readOnly: ${3:true}
endsnippet

snippet "k8s: Sleep Command" "Kubernetes sleep"
command: ["sh", "-c"]
args:
- |
sleep 3600
endsnippet
